#!/usr/bin/env python3
import base64
import urllib.parse
import sys
from termcolor import colored
import nltk 
from nltk.corpus import words
import binascii
import html
import quopri
from html import unescape
from urllib.parse import unquote
import json
import zlib
import ast
import os
import argparse
import re
import traceback
import magic
import string
 

print("download words:\n")
nltk.download('words')
print("finish")
    

global result
result=None

global typef
typef=None

global fbase64,fbase85,fbase58
fbase64 = [None, None]  
fbase85 = [None, None] 
fbase58=None


english_words = set(words.words())
 

def guess_encoding(s):
    global fbase64,fbase85

    guesses = []
    accuracies = []
    
    def check_and_append(decoding, name):
            nonlocal guesses, accuracies
            if decoding:
                guesses.append(name)
                if en(decoding):
                    accuracies.append("accurate")
                else:
                    accuracies.append("guess")
     
    octal_c = octal_to_text(s)
    check_and_append(octal_c, "Octal")        
 
    ascii_c = ascii_to_text(s)
    check_and_append(ascii_c, "ASCII")
    
    # Binary
    binary_c = binary_to_text(s)
    check_and_append(binary_c, "Binary")

    # Hexadecimal
    hexi=decode_hex(s)
    check_and_append(hexi, "Hexadecimal")

    # Decimal
    decode_decimal
    decimal_a = split_sequence_based_on_delimiter(s)
    decimal_c = decode_decimal(decimal_a)
    check_and_append(decimal_c, "Decimal")

    # Base16
    base16_c = decode_base16(s)
    check_and_append(base16_c, "Base16")

    # Base32
    base32_c = decode_base32(s)
    check_and_append(base32_c, "Base32")

    # Base58
    base58_c = base58_decode(s)
    check_and_append(base58_c, "Base58")

    # Base85
    if fbase85[1]==None and fbase85[0]:
            check_and_append(fbase85[0], "Base85")

    # Base64
    if fbase64[1]==None and fbase64[0]:
        check_and_append(fbase64[0], "Base64")
 
    # URL
    url_c = advanced_url_decode(s)
    check_and_append(url_c if url_c != s else None, "URL")

    # Zlib Compression
    zlib_c = decode_zlib(s)
    check_and_append(zlib_c, "Zlib Compression")

    # UUencoding
    uue = decode_uu(s)
    check_and_append(uue, "UUencoding")
 
    # Punycode
    punycode = decode_punycode(s)
    check_and_append(punycode if punycode != s else None, "Punycode")


    if "accurate" in accuracies:
        accurate_indices = [i for i, x in enumerate(accuracies) if x == "accurate"]
        guesses = [guesses[i] for i in accurate_indices]
        final_accuracy = "accurate"
    else:
        final_accuracy = "guess"

    return guesses, final_accuracy

def en(text):
    text_words = set(text.lower().split())
    
    # If it's a single word
    if len(text_words) == 1:
        return list(text_words)[0] in english_words
    
    # If it's multiple words
    intersection = text_words.intersection(english_words)
 
    return len(intersection) >=1  

def decode_brainfuck(code):
    valid_commands = ['>', '<', '+', '-', '.', ',', '[', ']']
    
    tape = [0] * 30000  # Initialize tape
    ptr = 0  # Pointer to tape
    output = ''
    loops = []  # Stack to keep track of loop starting positions
    
    i = 0
    while i < len(code):
        cmd = code[i]
        
        # Check for invalid Brainfuck commands
        if cmd not in valid_commands:
            return None
        
        if cmd == '>':
            ptr += 1
        elif cmd == '<':
            ptr -= 1
        elif cmd == '+':
            tape[ptr] = (tape[ptr] + 1) % 256
        elif cmd == '-':
            tape[ptr] = (tape[ptr] - 1) % 256
        elif cmd == '.':
            output += chr(tape[ptr])
        elif cmd == ',':
            return None  # Input not supported
        elif cmd == '[':
            if tape[ptr] == 0:
                # Skip to the matching ']'
                depth = 1
                while depth > 0:
                    i += 1
                    if code[i] == '[':
                        depth += 1
                    elif code[i] == ']':
                        depth -= 1
            else:
                loops.append(i)
        elif cmd == ']':
            if loops:  # Only proceed if there is a corresponding '['
                if tape[ptr] != 0:
                    i = loops[-1] - 1  # Jump back to the corresponding '['
                else:
                    loops.pop()
                    
        i += 1
    
    return output

 

# Function to manually decode ROT47
def decode_rot47(input_string):
    return ''.join([chr(33 + ((ord(c) - 33 + 47) % 94)) if 33 <= ord(c) <= 126 else c for c in input_string])
 
def split_sequence_based_on_delimiter(input_string):
    delimiter = identify_delimiter(input_string)
    if delimiter:
        return input_string.split(delimiter)
    else:
        return input_string.split()
 

def decode_decimal(decimal_values):
    try:
        return ''.join([chr(int(i)) for i in decimal_values if 0 <= int(i) <= 0x10FFFF])  
    except ValueError:
        return None
    except OverflowError:
        return None
    except:
        return None


def identify_morse_delimiters(input_string):
    possible_delimiters = ['\n', '\\', '/', ',', ';', ':', ' ']
    word_delimiter = None
    letter_delimiter = None
    
    for delim in possible_delimiters:
        if delim in input_string:
            # First found delimiter is assumed to be the word delimiter
            if word_delimiter is None:
                word_delimiter = delim
            else:
                # The second found delimiter is assumed to be the letter delimiter
                letter_delimiter = delim
                break
                
    return word_delimiter, letter_delimiter

def decode_morse(input_string):   
    MORSE_CODE_DICT = { '.-':'A', '-...':'B', '-.-.':'C', '-..':'D', '.':'E', '..-.':'F', '--.':'G',
                        '....':'H', '..':'I', '.---':'J', '-.-':'K', '.-..':'L', '--':'M', '-.':'N',
                        '---':'O', '.--.':'P', '--.-':'Q', '.-.':'R', '...':'S', '-':'T', '..-':'U',
                        '...-':'V', '.--':'W', '-..-':'X', '-.--':'Y', '--..':'Z', '-----':'0', '.----':'1',
                        '..---':'2', '...--':'3', '....-':'4', '.....':'5', '-....':'6', '--...':'7', '---..':'8',
                        '----.':'9'}
   
    word_delimiter, letter_delimiter = identify_morse_delimiters(input_string)
    
    if word_delimiter:
        words = input_string.split(word_delimiter)
    else:
        words = [input_string]  # No word delimiter, treat entire string as one word
    
    letters = [word.split(letter_delimiter) if letter_delimiter else [word] for word in words]
    
    decoded_sentence = []
    for word in letters:
        decoded_word = ''.join(MORSE_CODE_DICT.get(char.strip(), '') for char in word)
        decoded_sentence.append(decoded_word)

    return ' '.join(decoded_sentence)
 

#Function to decode Caesar Cipher
def decode_caesar(input_string,shift):
    decoded = ""
    #for shift in range(26):
    for c in input_string:
        if c.isalpha():
            offset = 65 if c.isupper() else 97
            decoded += chr((ord(c) - offset - shift) % 26 + offset)
        else:
            decoded += c
    return decoded
 
# def read_input(file_path=None):
#     if file_path:
#         try:
#             with open(file_path, 'rb') as f:
#                 content = f.read()
#                 byte_values = [f"{byte:02x}" for byte in content]  # Convert each byte to its 2-digit hex representation
#                # print("Raw bytes in hexadecimal: ", ' '.join(byte_values))
#                 return content  # return the raw content if you wish
#         except FileNotFoundError:
#             print(colored("File not found", "red"))
#             sys.exit(1)
#         except Exception as e:
#             pass #print(f"An error occurred: {e}")
#     else:
#         return input("Please enter a string: ")

# def read_input(file_path=None):
#     if file_path:
#         try:
#             with open(file_path, 'rb') as f:
#                 content = f.read()
#                 try:
#                     if all(c in '0123456789abcdefABCDEF ' for c in input_data):
#                             # Remove spaces and convert to bytes from hex
#                         input_data = bytes.fromhex(input_data.replace(' ', ''))
#                     else:
#                         # Assume it's a string-representation of bytes and evaluate it
#                         input_data = eval(input_data)
#                     # Try to decode it as utf-8 text first
#                     return input_data 
#                 except UnicodeDecodeError:
#                     # If that fails, return the raw bytes
#                     return content
#         except FileNotFoundError:
#             print(colored("File not found", "red"))
#             sys.exit(1)
#         except Exception as e:
#             pass  # Handle or log other exceptions here if you want
#     else:
#         return input("Please enter a string: ")



def read_input(file_path=None):
    print("im inside the function file is:",file_path)
    if file_path:
        try:
            with open(file_path, 'r') as f:
                return f.read().strip()
        except FileNotFoundError:
            print(colored("File not found", "red"))
            sys.exit(1)
        except Exception as e:
            pass
    else:
        return input("Please enter a string: ")

def binary_to_text(binary_sequence):
    # Identify the delimiter used in the sequence
    delimiter = identify_delimiter(binary_sequence)
    
    # Split the sequence based on the identified delimiter
    if delimiter:
        binary_values = binary_sequence.split(delimiter)
    else:
        binary_values = [binary_sequence[i:i + 8] for i in range(0, len(binary_sequence), 8)]

    try:
        return ''.join([chr(int(value, 2)) for value in binary_values])
    except:
        return None


def base58_decode(base58_str):
    alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
    num = 0

    for char in base58_str:
        num *= 58
        if char not in alphabet:
            return None   
        digit = alphabet.index(char)
        num += digit
 
    # Convert the integer to bytes
    hex_representation = hex(num)[2:]
    if len(hex_representation) % 2 != 0:
        hex_representation = '0' + hex_representation

    # Convert bytes to UTF-8 string
    decoded_bytes = bytes.fromhex(hex_representation)
    try:
        return decoded_bytes.decode('utf-8')
    except:
        return None  # or you can return decoded_bytes to return the raw bytes


def decode_base85(input_string):
    try:
        out85=base64.a85decode(input_string) 
        if check_type(out85)=="string":
            fbase85[0] = out85.decode('utf-8')
            fbase85[1] = None
        else:
            fbase85[0] = None
            fbase85[1] = check_type(out85)
        return out85
    except:
        fbase85[0] = None
        fbase85[1] = None
  

def decode_base64(input_str):
    #global fbase64  # Declare the global variable
    try:
        out64 = base64.b64decode(input_str)
        
        if check_type(out64)=="string":
            fbase64[0] = out64.decode('utf-8')
            fbase64[1] = None
        else:
            fbase64[0] = None
            fbase64[1] = check_type(out64)
        return out64
    except:
        fbase64[0] = None
        fbase64[1] = None
    

def decode_base32(input_str):
    try:
        return base64.b32decode(input_str).decode('utf-8')
    except binascii.Error:
            padding_length = 8 - (len(input_str) % 8)
            padded_input_str = input_str + '=' * padding_length
            try:
                return base64.b32decode(padded_input_str).decode('utf-8')
            except:
                return None
    except:
        return None    

def decode_base16(input_string):
    try:
          decoded_bytes = base64.b16decode(input_string.upper())
          return decoded_bytes.decode('utf-8')
    except:
        return None

   
def identify_delimiter(deli):
    try:
        common_delimiters = [',', ' ', ';', '\t', ':', '|', '-']
        for delimiter in common_delimiters:
            if delimiter in deli:
                return delimiter
    except:
        return None
    return None

def ascii_to_text(ascii_sequence):
    try:
        delimiter = identify_delimiter(ascii_sequence)
        if delimiter:
            ascii_values = ascii_sequence.split(delimiter)
        else:
            ascii_values = [ascii_sequence[i:i + 3] for i in range(0, len(ascii_sequence), 3)]

        if all(int(value) <= 127 for value in ascii_values):
            return ''.join([chr(int(value)) for value in ascii_values])
        else:
            return None  # Not standard ASCII
    except:
        return None
 
 
def octal_to_text(octal_sequence):
    try:
        delimiter = identify_delimiter(octal_sequence)
        
        # If delimiter is found, split based on it
        if delimiter:
            octal_values = octal_sequence.split(delimiter)
        else:
            # If no delimiter, assume octal values are space-separated
            octal_values = octal_sequence.split()       
        return ''.join([chr(int(value, 8)) for value in octal_values])
    except (ValueError, OverflowError): # Catch ValueError if conversion to int fails
        return None
 
def print_decoded_output(decoded_str, description, is_english):
    global result, fbase64,typef,fbase85

    result=True
    colored_str = colored(decoded_str, 'yellow')
    guesses, accuracy = guess_encoding(decoded_str)  # Make sure guess_encoding returns both values

    # Filter out the current decoding scheme from the guesses
    filtered_guesses = [guess for guess in guesses if guess != description]
    #if is_printable(decoded_str) and not args.english:
    if not args.english:
        if is_english:
            print("\n" + colored(f"{description} Decode:", "green"), colored("--probable--", "red"), flush=True)
        else:
            print("\n" + colored(f"{description} Decode:", "blue"))
        print(colored_str)
        if not is_english:
            if filtered_guesses:
                print(f"try decoding this to: {', '.join(filtered_guesses)} - Accuracy: {accuracy}")

    #elif is_printable(decoded_str) and args.english:
    elif args.english:
        if is_english:
            print("\n" + colored(f"{description} Decode:", "green"), colored("--probable--", "red"), flush=True)
            print(colored_str)

def decode_uu(input_string):
    # Remove 'begin' and 'end' lines and split into lines
    lines = input_string.strip().split("\n")[1:-1]
    
    decoded_bytes = bytearray()
    
    for line in lines:
        if not line:  # Skip empty lines
            continue
            
        # Get the length character and calculate the length
        len_char = line[0]
        data_len = (ord(len_char) - 0x20) & 0x3F  # 0x20 is the ASCII space character
        
        try:
            # Decode the rest of the line
            line_data = line[1:]
            for i in range(0, len(line_data), 4):
                c1, c2, c3, c4 = (ord(char) - 0x20 for char in line_data[i:i+4])
                
                # Reconstruct the original 3 bytes from the 4 characters
                b1 = c1 << 2 | c2 >> 4
                b2 = (c2 & 0xF) << 4 | c3 >> 2
                b3 = (c3 & 0x3) << 6 | c4
                
                # Add the bytes to the decoded bytes array, making sure not to exceed the expected length
                if data_len > 0:
                    decoded_bytes.append(b1)
                    data_len -= 1
                if data_len > 0:
                    decoded_bytes.append(b2)
                    data_len -= 1
                if data_len > 0:
                    decoded_bytes.append(b3)
                    data_len -= 1
        except:
            return None

    return decoded_bytes  # Make sure to return the decoded bytes
 
 
    # Convert the byte array to a string
    return decoded_bytes.decode('utf-8', errors='ignore')
 
def decode_quoted_printable(input_string):
    try:
        return quopri.decodestring(input_string).decode('utf-8')
    except:
        return None

def decode_punycode(input_string):
    try:
         encoded_str = input_string.encode('ascii')
         decoded_str = encoded_str.decode('idna')
         return decoded_str
    except:
         return None

def decode_jwt(input_string):
    try:
        parts = input_string.split('.')
        if len(parts) != 3:
            return None
        payload = parts[1]
        decoded_payload = base64.urlsafe_b64decode(payload + '==').decode('utf-8')
        return json.dumps(json.loads(decoded_payload))  # Convert the dictionary back to a JSON string
    except:
        return None

 
def decode_zlib(input_string):
    try:
        # Convert the string representation of bytes to actual bytes
        byte_data = ast.literal_eval(input_string)
        
        # Perform Zlib decompression
        return zlib.decompress(byte_data).decode('utf-8')
    except Exception as e:
        return None

def decode_atbash(input_string):
    decoded = ''
    try:
        for c in input_string:
            if c.isalpha():
                offset = 65 if c.isupper() else 97
                decoded += chr(25 - (ord(c) - offset) + offset)
            else:
                decoded += c
        return decoded
    except:
        return None

def advanced_url_decode(input_str):   
    # Replace '+' with spaces
    input_str = input_str.replace('+', ' ')
    
    # Perform URL decoding
    decoded_str = unquote(input_str)
    
    # Unescape HTML entities
    decoded_str = unescape(decoded_str)
    
    return decoded_str

def decode_hex(input_string):
    cleaned_input = input_string.replace("0x", "").replace(" ", "")
    if all(c in '0123456789abcdefABCDEF' for c in cleaned_input):
        try:
            hex_bytes = bytes.fromhex(cleaned_input)
            return hex_bytes.decode('LATIN1', 'ignore')
        except ValueError:
            return None
    return None

 


def clean_hex_dump(hex_dump):
    try:
        lines = hex_dump.strip().split("\n")
        cleaned_hex = ""
        for line in lines:
            # Remove the line number (first 4 characters) and then take the hex digits
            hex_values = line[6:].split()
            cleaned_hex += ''.join(hex_values)
    except:
        return None
    return cleaned_hex
 

def check_type(data):
    mime = magic.Magic()
    data_type = mime.from_buffer(data)
    decoded_data = data.decode('utf-8')
    cleaned_data = decoded_data.replace("[", "").replace("]", "").replace("(", "").replace(")", "")

    if 'UTF-8' in data_type or 'ASCII' in data_type:
        return "string"
    
    elif any(char.isalpha() for char in cleaned_data):
        return "string"
    else:
        return data_type
    
def print_not_string(encodetype,typefile):
           print("\n" + colored(f"{encodetype} Decode:", "green"), colored("--probable--", "red"), flush=True)
           print(f"the {encodetype} not string. type is: ",typefile)
           
def write_to_file(data, file_extension):
    file_name = f"output.{file_extension}"
    with open(file_name, 'wb') as f:
        f.write(data)

def deb(x):
    print(x)
    sys.exit(0)

 
def xor_decode(ciphertext, key):
    plaintext = b""
    for c in ciphertext:
        plaintext += bytes([c ^ key])
    return plaintext
 
def is_printable(s):
    return all(32 <= ord(c) < 127 or ord(c) == 10 for c in s)


def brute_force_single_byte_xor(ciphertext_str):
    global result
    ciphertext = ciphertext_str.encode('utf-8')  # Convert the string to bytes
    for key in range(256):
        decoded_text = xor_decode(ciphertext, key)
        try:
            decoded_str = str(decoded_text.decode('utf-8'))
            is_english=en(decoded_str)
           # if is_printable(decoded_str):
            if args.english or is_english:
                if is_english:
                    final_xor = ', '.join([f"{colored(decoded_str, 'yellow')} (key {key})"])
                    print("\n" + colored("XOR Decode:", "green"), colored("--probable--", "red"), flush=True)
                    print(final_xor)
                    result=True
            elif not args.english:
                if not is_english:
                    final_xor = ', '.join([f"{colored(decoded_str, 'yellow')} (key {key})"])
                    print("\n" + colored("XOR Decode:", "yellow"), flush=True)
                    print(final_xor)
                    result=True
        except UnicodeDecodeError:
            continue  # Skip non-UTF-8 results
 

if __name__ == "__main__":
    # global fbase64
    parser = argparse.ArgumentParser(description=colored("This script decodes the following formats:", "yellow"))
    parser.add_argument("file_path", help="Path to the file to be decoded", nargs='?', default=None)
    parser.add_argument("-a", "--all", help="Activate all decoding methods", action="store_true")
    parser.add_argument("-c", "--chiper", help="Activate Classic Cipher Decoders: ROT47, Caesar Cipher (all 26 shifts), Atbash Cipher, XOR", action="store_true")
    parser.add_argument("-i", "--internet",  help="Activate URL and Internet Format Decoders: URL Encoding, Punycode, JWT Tokens", action="store_true")
    parser.add_argument("-s", "--system",  help="Activate Numeral System Decoders: ASCII, Octal, Binary, Decimal, Hexadecimal", action="store_true")
    parser.add_argument("-b", "--base", help="Activate Base Decoders: Base16, Base32, Base58, Base64, Base85", action="store_true")
    parser.add_argument("-d", "--data", help="Activate Data Serialization Format Decoders: Hex dump, UUencoding, Quoted-Printable", action="store_true")
    parser.add_argument("-p", "--spec", help="Activate Specialized Decoders: Morse Code, Zlib Compression, Brainfuck", action="store_true")
    parser.add_argument("-e", "--english", help="Activate all methods but limit results to English strings", action="store_true")
 
    
    args = parser.parse_args()
   
    print (sys.argv)
    if len(sys.argv) > 1 and not '-h' in sys.argv or '--help' in sys.argv:
        file_path = args.file_path
    try:   
        input_string = read_input(file_path)
        print("string ",input_string)
    except KeyboardInterrupt:
        print("\rexiting..\033[K\n", end='', flush=True)
        sys.exit(0)
    except Exception as i:
        print (i)

    # sys.exit(0)

    if not input_string:
        print(colored("Usage: {} <string> or {} <path/to/file>".format(sys.argv[0], sys.argv[0]), "red"))
        sys.exit(1)

    os.system('clear')
    

    activated_flag = False

    for arg, value in vars(args).items():
        if value is True:
            # If this is the first activated decoder, print the header
            if not activated_flag:
                print(colored("Activated decoders:","cyan"))
                activated_flag = True
            print(f"{arg}")

    if not activated_flag:
        args.system = True
        args.base = True
        print(colored("No arguments provided. Activating default:","cyan"),"\nSystem\nBase")


    print("\n" + colored("Input String:", "magenta"))
    print(input_string)

    if args.system or args.all or args.english:
        ascii_value = ascii_to_text(input_string)
        if ascii_value:
            is_english = en(ascii_value)
            print_decoded_output(ascii_value, "Ascii", is_english)

    if args.system or args.all or args.english:
        octal_d = octal_to_text(input_string)
        if octal_d:
            is_english = en(octal_d)
            print_decoded_output(octal_d, "Octal", is_english)
 
    if args.system or args.all or args.english:
        binary=binary_to_text(input_string)
        if  binary:
                is_english=en(binary)
                print_decoded_output(binary, "Binary", is_english) 

    if args.system or args.all or args.english:
        hexi=decode_hex(input_string)
        if hexi:
                is_english=en(hexi)
                print_decoded_output(hexi, "Hex", is_english) 
    
    if args.system or args.all or args.english:
        decimal_values = split_sequence_based_on_delimiter(input_string)
        decimali = decode_decimal(decimal_values)
        if decimali:
            is_english=en(decimali)
            print_decoded_output(decimali, "Decimal", is_english)
    
    if args.base or args.all or args.english:
        base16_value=decode_base16(input_string)
        if base16_value:
            is_english=en(base16_value)
            print_decoded_output(base16_value, "Base16", is_english)

    if args.base or args.all or args.english:
        base32 = decode_base32(input_string)   
        if base32:
            is_english = en(base32)
            print_decoded_output(base32, "Base32", is_english)

    if args.base or args.all or args.english:
        base58_value = base58_decode(input_string)
        if base58_value:
            is_english = en(base58_value)
            print_decoded_output(base58_value, "Base58", is_english)
 
    if args.base or args.all or args.english: 
        base85=decode_base85(input_string)  # This will update fbase64
        if fbase85[0]:
               is_english = en(fbase85[0])
               print_decoded_output(fbase85[0], "Base85", is_english)
        else:
            if fbase85[1] and fbase85[1] != "data" and all(x not in fbase85[1] for x in ["EBCDIC", "text","very short","no magic","empty"]):
                print_not_string("Base85", fbase85[1])
                exte = fbase85[1].split(' ')[0].split('/')[-1]
                print(f"save to file: output.{exte}")
                write_to_file(base85,exte)
 
    if args.base or args.all or args.english:
        b64=decode_base64(input_string)  # This will update fbase64   
        # print (b64)
        # print("\n",fbase64)
        if fbase64[0]:        
               is_english = en(fbase64[0])
               print_decoded_output(fbase64[0], "Base64", is_english)
        else:
            if fbase64[1] and fbase64[1] != "data" and all(x not in fbase64[1] for x in ["EBCDIC", "text","very short","no magic","empty"]):
               print_not_string("Base64", fbase64[1])
               exte = fbase64[1].split(' ')[0].split('/')[-1]
               print(f"save to file: output.{exte}")
               write_to_file(b64,exte)
     
    if args.internet or args.all or args.english:
        urli = advanced_url_decode(input_string)
        if urli and urli != input_string:
            is_english = en(urli)
            print_decoded_output(urli, "URL", is_english)
    
    if args.internet or args.all or args.english:    
        punycode=decode_punycode(input_string)
        if punycode and punycode != input_string:
            is_english=en(punycode)
            print_decoded_output(punycode,"punycode", is_english)

    if args.internet or args.all or args.english:
        jwt=decode_jwt(input_string)  
        if jwt:
            is_english=en(jwt)
            print_decoded_output(jwt,"JWT Tokens", is_english)


    if  args.chiper or args.all or args.english:
        xor=brute_force_single_byte_xor(input_string)
    
    if args.chiper or args.all or args.english:
        atbash=decode_atbash(input_string)
        if atbash and atbash != input_string:
            is_english=en(atbash)
            print_decoded_output(atbash,"Atbash cipher", is_english)

    if args.chiper or args.all or args.english:
        rot47=decode_rot47(input_string)
        if rot47:
            is_english=en(rot47)
            print_decoded_output(rot47, "ROT47", is_english)

    if args.chiper or args.all or args.english:
        final_cae=[]
        cae2=[]
        found=False
        for s in range(26):
            cae = decode_caesar(input_string, s)
            is_english = en(cae)
            if input_string not in cae:
                if is_english:
                    found = True
                    final_cae.append((cae, s))
                else:
                    cae2.append((cae, s))
        if args.english or found:
            if found:
                final_cae_str = ', '.join([f"{colored(cae, 'yellow')} (shift {s})" for cae, s in final_cae])
                print("\n" + colored("Caesar Cipher Decode [ROT13]:", "green"), colored("--probable--", "red"), flush=True)
                print(final_cae_str)
        elif not args.english:
            if not found:
                try:
                    if cae2:
                        print("\n" + colored("Caesar Cipher Decode [ROT13]:", "blue"), "\nno match in English so showing all probability", flush=True)
                        cae2_str = ', '.join([f"{colored(cae, 'yellow')} (shift {s})" for cae, s in cae2])
                        print(cae2_str)
                except:
                    pass

    if args.spec or args.all or args.english:   
        morse = decode_morse(input_string)
        if morse:
            if morse.strip():
                is_english = en(morse) 
                print_decoded_output(morse, "Morse", is_english)

    if args.spec or args.all or args.english:  
        zlib=decode_zlib(input_string) ##faild
        if zlib:
            is_english=en(zlib)
            print_decoded_output(zlib,"Zlib", is_english)

    if args.spec or args.all or args.english:  
        brainfuck = decode_brainfuck(input_string)
        if brainfuck:
            is_english = en(brainfuck)
            print_decoded_output(brainfuck, "Brainfuck", is_english)

    if args.data or args.all or args.english:
        hdump=clean_hex_dump(input_string)
        if hdump:
            is_english=en(hdump)
            print_decoded_output(hdump,"Hex dump",is_english)

    if args.data or args.all or args.english:    
        uue=decode_uu(input_string)
        if uue:
            uue = uue.decode('utf-8')
            is_english=en(uue)
            print_decoded_output(uue,"UUencoding", is_english)

    if args.data or args.all or args.english:
        quoted=decode_quoted_printable(input_string)
        if quoted and quoted != input_string:
            is_english=en(quoted)
            print_decoded_output(quoted,"quoted_printable", is_english)
    
print("")
if not result:
    print(colored("No matching decode found\n","red"))
