#!/usr/bin/env python3
import subprocess
import sys
import re
from datetime import datetime
import socket

global fulls  
fulls=[]

def print_bold(msg, color_code):
    print(f"\033[{color_code}m{msg}\033[0m")

def print_help_message():
    print("Nmap Automation Script Usage:")
    print("This script automates the process of running initial and detailed Nmap scans.")
    print("\nUsage:")
    print("  python script.py [-p] <IP_ADDRESS or DOMAIN>")
    print("\nOptions:")
    print("  -p            Perform a full scan on all 65535 ports. If omitted, scans common ports.")
    print("  <IP_ADDRESS>  Target IP address for the scan.")
    print("  <DOMAIN>      Target domain for the scan. The script will resolve it to an IP address.")
    print("\nThe script performs an initial Nmap scan to detect open ports,")
    print("followed by a detailed scan on each open port for further information.")


def get_time():
    current_time = datetime.now().strftime('%H:%M:%S')
    return current_time

def parse_arguments():
    if '-p-' in sys.argv:
        # Directly check for '-p-' in the arguments
        port_option = ['-p-']  # Scan all ports
    elif '-p' in sys.argv:
        p_index = sys.argv.index('-p')
        # Check if there is an argument after '-p'
        if p_index + 1 < len(sys.argv) and not sys.argv[p_index + 1].startswith('-'):
            port_option = sys.argv[p_index:p_index + 2]  # Capture ['-p', 'port_number']
        else:
            print("Error: '-p' option requires a port number.")
            sys.exit(1)
    else:
        port_option = []  # Default, no port specification

    return port_option


def run_nmap_initial(ip, port_option):
    print_bold("Starting Initial Scan...", "1;34")
    cmd = ["sudo", "nmap", "-Pn", "-sS"] + port_option + [ip]
   
    try:
        result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    except KeyboardInterrupt:
        print("\rexiting...")
        sys.exit(0)
    return result.stdout

def extract_ports(output):
    ports = []
    lines = output.split("\n")
    for line in lines:
        if "open" in line:
            port = re.search(r"(\d+)/", line).group(1)
            ports.append(port)
            fulls.append(line)
    return ", ".join(ports)


def run_nmap_detailed_per_port(ip, ports):
    print_bold("Starting Detailed Scans...", "1;34")
    detailed_outputs = []
    smb_related = ['smb', 'netbios-ssn', 'microsoft-ds', '139', '445']
    rpc_related = ['rpcbind', '111']

    for port in ports.split(", "):
        print(f"\033[35mScanning port {port}\033[0m")
        
        # Base nmap command
        cmd = ["sudo", "nmap", "-Pn", "-sC", "-A", "-sV", "-T4", "-p", port, ip]

        if any(x in port.lower() for x in smb_related):
            cmd.extend(["--script=smb-enum-shares.nse,smb-enum-users.nse"])
    
        if any(x in port.lower() for x in rpc_related):
            cmd.extend(["--script=nfs-ls,nfs-statfs,nfs-showmount"])

        if "ftp" in port.lower() or "21" in port:
            cmd.extend(["--script=ftp-anon.nse,ftp-libopie.nse"])
            
        if "http" in port.lower() or "80" in port or "443" in port:
            cmd.extend(["--script=http-headers.nse,http-methods.nse"])
        
        try:
            result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        except KeyboardInterrupt:
            print("\rexiting...")
            sys.exit(0)
        
        detailed_output = result.stdout
        print(detailed_output)
        detailed_outputs.append(detailed_output)

    return "\n".join(detailed_outputs)


def resolve_to_ip(domain):
    try:
        return socket.gethostbyname(domain)
    except socket.gaierror:
        return domain  # Return the original if it's already an IP or couldn't be resolved


     
if __name__ == "__main__":
    if len(sys.argv) < 2 or '-h' in sys.argv or '--help' in sys.argv:
        print_help_message()
        sys.exit(0)
    port_option = parse_arguments()
    

    if '-p-' in port_option:
        print("running all ports")
    elif '-p' in port_option and len(port_option) > 1:
        print("running ports", port_option[1])
    elif not port_option:
        print("running common ports")
     
    ip = None
    original_ip = sys.argv[1]
    resolved_ip = resolve_to_ip(original_ip)
    ip=resolved_ip
    print ("IP: ",ip)
    

    print("\nstart initial scan time: ",get_time())
    # Run initial nmap scan
    initial_output = run_nmap_initial(ip, port_option)
 
    # Extract open ports
    open_ports = extract_ports(initial_output)
    print(f"Open ports found:")
    for i in fulls: 
        print (i)
 
    if not open_ports:
        print("No open ports found. Exiting.")
        sys.exit(0)

    print("\nstart detailed scan time: ",get_time())
    # Run detailed nmap scans per port
    detailed_output = run_nmap_detailed_per_port(ip, open_ports)
    
    # Combine initial and detailed output
    combined_output = f"{initial_output}\n{detailed_output}"
    
    # Save combined output to file
    current_timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    file_name = f"nmap_result_{ip}_{current_timestamp}.txt"
    print_bold(f"\nWriting results to file: {file_name}", "1;32")
    with open(file_name, "a") as f:
        f.write(combined_output)
    
    print(f"\nend scan time: ",get_time())

